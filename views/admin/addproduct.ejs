<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Product</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>  
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <!-- <link href="https://unpkg.com/cropperjs/dist/cropper.min.css" rel="stylesheet" /> -->
        <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f8f9fa;
        }
        .sidebar {
            width: 250px;
            height: 100vh;
            background-color: #343a40;
            padding: 20px;
            color: #fff;
            position: fixed;
        }
        .sidebar h2 {
            text-align: center;
            margin-bottom: 20px;
        }
        .sidebar a {
            display: block;
            padding: 10px;
            color: #fff;
            text-decoration: none;
            margin-bottom: 10px;
        }
        .sidebar a:hover {
            background-color: #495057;
        }
        .main-content {
            margin-left: 270px;
            padding: 20px;
            width: calc(100% - 270px);
        }
        .form-container {
            background-color: #fff;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            max-width: 800px;
            margin: 0 auto;
        }
        .form-container h3 {
            text-align: center;
            margin-bottom: 20px;
            color: #d9534f;
        }
        .form-group {
            margin-bottom: 20px;
        }
        .form-control,
        .form-control-file {
            border-radius: 5px;
            padding: 10px;
        }
        .image-upload {
            position: relative;
            width: 100px;
            height: 100px;
            border: 2px dashed #ccc;
            border-radius: 10px;
            overflow: hidden;
            text-align: center;
            cursor: pointer;
            margin-right: 10px;
        }
        .image-upload input[type="file"] {
            display: none;
        }
        .image-upload img.preview {
            display: none;
            max-width: 100%;
            max-height: 100%;
        }
        .image-upload div {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: #ccc;
            font-size: 14px;
        }
        .error-message {
            color: red;
            margin-top: 5px;
            font-size: 0.875rem;
        }
    </style>
</head>
<body>

<div class="sidebar">
    <h2>BOOGY</h2>
    <a href="/admin/dashboard">Dashboard</a>
    <a href="/admin/loadusermanage">Customer</a>
    <a href="/admin/loadOrderlist">Orders</a>
    <a href="/admin/loadCategory">Product</a>
    <a href="/admin/loadCoupon">Coupon</a>
    <a href="/admin/loadOffer">Offers</a>
    <a href="/admin/loadCategory">Categories</a>
    <a href="/admin/logout">Logout</a>
</div>


<div class="main-content"></div>
    <div class="form-container">
        <h3>Add Product</h3>

        <!-- Error Summary for displaying validation errors -->
        <div id="error-summary" class="alert alert-danger" style="display: none;"></div>

        <!-- Add Product Form -->
        <form id="addProductForm" action="/admin/addProduct" method="POST" enctype="multipart/form-data">

            <!-- Product Name -->
            <div class="form-group">
                <label for="productName">Product Name</label>
                <input type="text" class="form-control" id="productName" name="productName" >
                <div class="error-message" id="productNameError"></div>
            </div>

            <!-- Category Selection -->
            <div class="form-group">
                <label for="category">Category</label>
                <select class="form-control" id="category" name="category" >
                    <% categories.forEach(category => { %>
                        <option value="<%= category._id %>"><%= category.name %></option>
                    <% }); %>
                </select>
                <div class="error-message" id="categoryError"></div>
            </div>

            <!-- Price Input -->
            <div class="form-group">
                <label for="price">Price</label>
                <input type="number" class="form-control" id="price" name="price" >
                <div class="error-message" id="priceError"></div>
            </div>

            <!-- Quantity Input -->
            <div class="form-group">
                <label for="quantity">Quantity</label>
                <input type="number" class="form-control" id="quantity" name="quantity">
                <div class="error-message" id="quantityError"></div>
            </div>

            <!-- Description -->
            <div class="form-group">
                <label for="description">Description</label>
                <textarea class="form-control" id="description" name="description" ></textarea>
                <div class="error-message" id="descriptionError"></div>
            </div>

            <!-- Image Upload Section -->
            <div class="form-group image-group">
                <label class="image-upload">
                    <input type="file" name="productImage1" accept="image/png, image/jpeg" id="productImage1" >
                    <img id="preview1" class="preview" alt="Image Preview">
                    <div>Click to upload image 1</div>
                </label>
                <label class="image-upload">
                    <input type="file" name="productImage2" accept="image/png, image/jpeg" id="productImage2">
                    <img id="preview2" class="preview" alt="Image Preview">
                    <div>Click to upload image 2</div>
                </label>
                <label class="image-upload">
                    <input type="file" name="productImage3" accept="image/png, image/jpeg" id="productImage3" >
                    <img id="preview3" class="preview" alt="Image Preview">
                    <div>Click to upload image 3</div>
                </label>
                <label class="image-upload">
                    <input type="file" name="productImage4" accept="image/png, image/jpeg" id="productImage4" >
                    <img id="preview4" class="preview" alt="Image Preview">
                    <div>Click to upload image 4</div>
                </label>
            </div>

            <div class="update-btn">
                <button type="submit" class="btn btn-primary">Add Product</button>
            </div>
        </form>
    </div>
</div>



<!-- cropper -->

<div class="modal fade" id="cropperModal" tabindex="-1" role="dialog" aria-labelledby="cropperModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-xl" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="cropperModalLabel">Crop Images</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="d-flex flex-row overflow-auto" id="imagesContainer" style="max-height: 500px;">
                        <!-- Images will be dynamically added here -->
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" id="cropButton">Crop</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
    </div>

<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('addProductForm');
    const errorSummary = document.getElementById('error-summary');

    form.addEventListener('submit', function(event) {
        let valid = true;
        let errorMessages = [];

        // Clear previous errors
        document.querySelectorAll('.error-message').forEach(elem => elem.textContent = '');
        errorSummary.style.display = 'none';

        // Helper function to add error messages
        function addError(element, message, errorId) {
            valid = false;
            document.getElementById(errorId).textContent = message;
            errorMessages.push(message);
        }

        // Validate product name (allow letters and spaces)
        const productName = document.getElementById('productName');
        const namePattern = /^[a-zA-Z\s]+$/; // Updated to allow spaces
        if (!productName.value.trim()) {
            addError(productName, 'Product name is required.', 'productNameError');
        } else if (!namePattern.test(productName.value.trim())) {
            addError(productName, 'Product name must contain only letters and spaces.', 'productNameError');
        }

        // Validate images
        const imageInputs = document.querySelectorAll('.image-upload input[type="file"]');
        const allowedTypes = ['image/png', 'image/jpeg'];
        let validImageCount = 0;
        imageInputs.forEach(input => {
            if (input.files.length > 0) {
                const file = input.files[0];
                if (!allowedTypes.includes(file.type)) {
                    addError(input, 'Only PNG and JPEG images are allowed.', 'imageError');
                } else {
                    validImageCount++;
                }
            }
        });

        if (validImageCount === 0) {
            addError(null, 'At least one image is required.', 'imageError');
        }

        // Display error summary if there are errors
        if (!valid) {
            errorSummary.innerHTML = `<strong>Please fix the following errors:</strong><ul>${errorMessages.map(msg => `<li>${msg}</li>`).join('')}</ul>`;
            errorSummary.style.display = 'block';
            event.preventDefault(); // Prevent form submission
        }
    });

    // Preview image function (Consolidated)
    document.querySelectorAll('.image-upload input[type="file"]').forEach(input => {
        input.addEventListener('change', function() {
            const file = this.files[0];
            const preview = document.getElementById('preview' + this.id.slice(-1));
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    preview.src = e.target.result;
                    preview.style.display = 'block';
                };
                reader.readAsDataURL(file);
            } else {
                preview.src = '';
                preview.style.display = 'none';
            }
        });
    });
});

// Cropper logic
let croppers = [];
const modal = document.getElementById('cropperModal');
const imagesContainer = document.getElementById('imagesContainer');
const cropButton = document.getElementById('cropButton');

// Image input elements
const imageInputs = [
    document.getElementById('productImage1'),
    document.getElementById('productImage2'),
    document.getElementById('productImage3'),
    document.getElementById('productImage4')
];

// Loop through each image input to bind the change event
imageInputs.forEach((input, inputIndex) => {
    input.addEventListener('change', function (event) {
        const files = event.target.files;
        if (files && files.length > 0) {
            imagesContainer.innerHTML = ''; // Clear previous images
            croppers = []; // Reset croppers array

            Array.from(files).forEach((file, fileIndex) => {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const imgWrapper = document.createElement('div');
                    imgWrapper.style.position = 'relative';
                    imgWrapper.style.display = 'inline-block';
                    imgWrapper.style.marginRight = '10px';

                    const img = document.createElement('img');
                    img.src = e.target.result;
                    img.style.maxWidth = '100%';
                    img.style.maxHeight = '400px';
                    img.id = `image${inputIndex}-${fileIndex}`; // Unique ID for each image
                    imgWrapper.appendChild(img);

                    imagesContainer.appendChild(imgWrapper);

                    // Initialize Cropper.js for the new image after it has been appended
                    img.addEventListener('load', () => {
                        const cropper = new Cropper(img, {
                            aspectRatio: 1,
                            viewMode: 2,
                        });
                        croppers.push({ cropper, inputIndex, fileIndex });
                    });
                };
                reader.readAsDataURL(file);
            });

            // Show the modal when an image is selected
            $('#cropperModal').modal('show');
        }
    });
});

// Crop images and replace the original input file with the cropped version
cropButton.addEventListener('click', function () {
    croppers.forEach(({ cropper, inputIndex }) => {
        const canvas = cropper.getCroppedCanvas({
            width: 400,
            height: 400,
        });

        canvas.toBlob(function (blob) {
            const url = URL.createObjectURL(blob);
            const newImage = new File([blob], imageInputs[inputIndex].files[0].name, { type: blob.type });

            // Update the specific image input field with the cropped image
            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(newImage);  // Only add the new cropped image
            imageInputs[inputIndex].files = dataTransfer.files;
        });
    });

    $('#cropperModal').modal('hide');
});

</script>
<%- include('../layouts/footer') %>
</body>
</html>
