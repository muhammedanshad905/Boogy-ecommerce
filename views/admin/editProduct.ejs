<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Boogy.Edit Product</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f8f9fa;
        }

        .container {
            margin-top: 20px;
        }

        .form-group img {
            max-width: 150px;
            height: auto;
            margin-top: 10px;
            border: 1px solid #dee2e6;
            border-radius: 5px;
        }

        .error-message {
            color: red;
            font-size: 0.875rem;
            margin-top: 5px;
        }
    </style>
</head>

<body>

    <div class="container">
        <h2>Edit Product</h2>
        <form id="editProductForm">
            <div class="form-group">
                <label for="productName">Product Name:</label>
                <input type="text" class="form-control" id="productName" name="productName"
                    value="<%= product.productName %>" required>
                <div class="error-message" id="productNameError"></div>
            </div>
            <div class="form-group">
                <label for="category">Category:</label>
                <select class="form-control" id="category" name="category" required>
                    <% categories.forEach(cat=> { %>
                        <option value="<%= cat._id %>" <%=product.category==cat._id ? 'selected' : '' %>><%= cat.name %>
                        </option>
                        <% }) %>
                </select>
                <div class="error-message" id="categoryError"></div>
            </div>
            <div class="form-group">
                <label for="price">Price:</label>
                <input type="number" class="form-control" id="price" name="price" value="<%= product.price %>" required>
                <div class="error-message" id="priceError"></div>
            </div>
            <div class="form-group">
                <label for="quantity">Quantity:</label>
                <input type="number" class="form-control" id="quantity" name="quantity" value="<%= product.quantity %>"
                    required>
                <div class="error-message" id="quantityError"></div>
            </div>
            <div class="form-group">
                <label for="description">Description:</label>
                <textarea class="form-control" id="description" name="description" rows="4"
                    required><%= product.description %></textarea>
                <div class="error-message" id="descriptionError"></div>
            </div>
            <div class="form-group">
                <label for="discount">Discount:</label>
                <input type="number" class="form-control" id="discount" name="discount" value="<%= product.discount %>">
                <div class="error-message" id="discountError"></div>
            </div>
            <div class="form-group">
                <label for="discountPrice">Discount Price:</label>
                <input type="number" class="form-control" id="discountPrice" name="discountPrice"
                    value="<%= product.discountPrice %>">
                <div class="error-message" id="discountPriceError"></div>
            </div>
            <div class="d-flex">
                <div class="form-group">
                    <label for="productImages">Product Images 1:</label>
                    <input type="file" class="form-control-file" id="productImage1" name="productImage1" accept="image/*">
                    <% if (product.productImage.length > 0) { %>
                        <img src="/assets/productImages/<%= product.productImage[0] %>" alt="Product Image" width="100">
                    <% } %>
                    <div class="error-message" id="imageError"></div>
                </div>
                <div class="form-group">
                    <label for="productImages">Product Images 2:</label>
                    <input type="file" class="form-control-file" id="productImage2" name="productImage2" accept="image/*">
                    <% if (product.productImage.length > 1) { %>
                        <img src="/assets/productImages/<%= product.productImage[1] %>" alt="Product Image" width="100">
                    <% } %>
                    <div class="error-message" id="imageError"></div>
                </div>
                <div class="form-group">
                    <label for="productImages">Product Images 3:</label>
                    <input type="file" class="form-control-file" id="productImage3" name="productImage3" accept="image/*">
                    <% if (product.productImage.length > 2) { %>
                        <img src="/assets/productImages/<%= product.productImage[2] %>" alt="Product Image" width="100">
                    <% } %>
                    <div class="error-message" id="imageError"></div>
                </div>
                <div class="form-group">
                    <label for="productImages">Product Images 4:</label>
                    <input type="file" class="form-control-file" id="productImage4" name="productImage4" accept="image/*">
                    <% if (product.productImage.length > 3) { %>
                        <img src="/assets/productImages/<%= product.productImage[3] %>" alt="Product Image" width="100">
                    <% } %>
                    <div class="error-message" id="imageError"></div>
                </div>
                <input id="productId" type="hidden" value="<%= product._id %>">
            </div>
            
            <button type="submit" class="btn btn-primary">Update Product</button>
        </form>
    </div>
<!-- cropper -->

 <div class="modal fade" id="cropperModal" tabindex="-1" role="dialog" aria-labelledby="cropperModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-xl" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="cropperModalLabel">Crop Images</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="d-flex flex-row overflow-auto" id="imagesContainer" style="max-height: 500px;">
                        <!-- Images will be dynamically added here -->
                 </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" id="cropButton">Crop</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
    </div> 

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>

    <script>
        document.getElementById('editProductForm').addEventListener('submit', function (event) {
            event.preventDefault();

            const form = document.getElementById('editProductForm');
            const formData = new FormData(form);
            let valid = true;
            const errorMessages = [];

            // Clear previous errors
            document.querySelectorAll('.error-message').forEach(elem => elem.textContent = '');

            // Helper function to add error messages
            function addError(element, message, errorId) {
                valid = false;
                document.getElementById(errorId).textContent = message;
                errorMessages.push(message);
            }

            // Validate product name
            const productName = document.getElementById('productName');
            const productId = document.getElementById('productId').value
            const namePattern = /^[a-zA-Z\s]+$/;
            if (!productName.value.trim()) {
                addError(productName, 'Product name is required.', 'productNameError');
            } else if (!namePattern.test(productName.value.trim())) {
                addError(productName, 'Product name must contain only letters and spaces.', 'productNameError');
            }

            // Validate category
            const category = document.getElementById('category');
            if (!category.value) {
                addError(category, 'Please select a category.', 'categoryError');
            }

            // Validate price
            const price = document.getElementById('price');
            if (price.value <= 0) {
                addError(price, 'Price must be greater than zero.', 'priceError');
            }

            // Validate quantity
            const quantity = document.getElementById('quantity');
            if (quantity.value <= 0) {
                addError(quantity, 'Quantity must be greater than zero.', 'quantityError');
            }

            // Validate description
            const description = document.getElementById('description');
            if (!description.value.trim()) {
                addError(description, 'Description is required.', 'descriptionError');
            }

            // Validate discount
            const discount = document.getElementById('discount');
            if (discount.value < 0) {
                addError(discount, 'Discount cannot be negative.', 'discountError');
            }

            // Validate discount price
            const discountPrice = document.getElementById('discountPrice');
            if (discountPrice.value < 0) {
                addError(discountPrice, 'Discount price cannot be negative.', 'discountPriceError');
            }

            // Validate images
            const imageInput = ['procutImage1', 'productImage2', 'productImage3', 'prodctImage4']
            const allowedTypes = ['image/png', 'image/jpeg', 'image/jpg', 'image/gif', 'image/bmp', 'image/webp', 'image/svg+xml', 'image/tiff'];
            imageInput.forEach((inputId) => {
    const input = document.getElementById(inputId);
    if (input && input.files.length > 0) {
        Array.from(input.files).forEach((file) => {
            if (!allowedTypes.includes(file.type)) {
                addError(input, 'Only PNG, JPEG, and other specified images are allowed.', 'imageError');
            }
        });
    }
});


            // Display error summary if there are errors
            if (!valid) {
                alert('Please fix the errors in the form.');
                return; // Prevent form submission if validation fails
            }

            console.log(productId);
            
            const formSubmit = document.querySelector('form');
formSubmit.addEventListener('submit', function(event) {
    event.preventDefault();

    const productId = document.getElementById('productId').value;
    const formData = new FormData(formSubmit); // Use FormData to handle file uploads

    fetch(`/admin/updateProduct/${productId}`, {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            window.location.href = '/admin/loadProductmanage';
        } else {
            alert('Failed to update product');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('An error occurred while updating the product');
    });
});

        });

        // cropper

//         let croppers = [];
// const modal = document.getElementById('cropperModal');
// const imagesContainer = document.getElementById('imagesContainer');
// const cropButton = document.getElementById('cropButton');

// // Image input elements
// const imageInputs = [
//     document.getElementById('productImage1'),
//     document.getElementById('productImage2'),
//     document.getElementById('productImage3'),
//     document.getElementById('productImage4')
// ];

// // Loop through each image input to bind the change event
// imageInputs.forEach((input, inputIndex) => {
//     input.addEventListener('change', function (event) {
//         const files = event.target.files;
//         if (files && files.length > 0) {
//             imagesContainer.innerHTML = ''; // Clear previous images
//             croppers = []; // Reset croppers array

//             Array.from(files).forEach((file, fileIndex) => {
//                 const reader = new FileReader();
//                 reader.onload = function (e) {
//                     const imgWrapper = document.createElement('div');
//                     imgWrapper.style.position = 'relative';
//                     imgWrapper.style.display = 'inline-block';
//                     imgWrapper.style.marginRight = '10px';

//                     const img = document.createElement('img');
//                     img.src = e.target.result;
//                     img.style.maxWidth = '100%';
//                     img.style.maxHeight = '400px';
//                     img.id = `image${inputIndex}-${fileIndex}`; // Unique ID for each image
//                     imgWrapper.appendChild(img);

//                     imagesContainer.appendChild(imgWrapper);

//                     // Initialize Cropper.js for the new image after it has been appended
//                     img.addEventListener('load', () => {
//                         const cropper = new Cropper(img, {
//                             aspectRatio: 1,
//                             viewMode: 2,
//                         });
//                         croppers.push({ cropper, inputIndex, fileIndex });
//                     });
//                 };
//                 reader.readAsDataURL(file);
//             });

//             // Show the modal when an image is selected
//             $('#cropperModal').modal('show');
//         }
//     });
// });

// // Crop images and replace the original input file with the cropped version
// cropButton.addEventListener('click', function () {
//     croppers.forEach(({ cropper, inputIndex }) => {
//         const canvas = cropper.getCroppedCanvas({
//             width: 400,
//             height: 400,
//         });

//         canvas.toBlob(function (blob) {
//             const url = URL.createObjectURL(blob);
//             const newImage = new File([blob], imageInputs[inputIndex].files[0].name, { type: blob.type });

//             // Update the specific image input field with the cropped image
//             const dataTransfer = new DataTransfer();
//             dataTransfer.items.add(newImage);  // Only add the new cropped image
//             imageInputs[inputIndex].files = dataTransfer.files;
//         });
//     });

//     $('#cropperModal').modal('hide');
// });
let croppers = [];
const modal = document.getElementById('cropperModal');
const imagesContainer = document.getElementById('imagesContainer');
const cropButton = document.getElementById('cropButton');

// Image input elements (assuming 4 inputs for product images)
const imageInputs = [
    document.getElementById('productImage1'),
    document.getElementById('productImage2'),
    document.getElementById('productImage3'),
    document.getElementById('productImage4')
];

// Loop through each image input to bind the change event
imageInputs.forEach((input, inputIndex) => {
    input.addEventListener('change', function (event) {
        const files = event.target.files;
        if (files && files.length > 0) {
            imagesContainer.innerHTML = ''; // Clear previous images
            croppers = []; // Reset croppers array

            Array.from(files).forEach((file, fileIndex) => {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const imgWrapper = document.createElement('div');
                    imgWrapper.style.position = 'relative';
                    imgWrapper.style.display = 'inline-block';
                    imgWrapper.style.marginRight = '10px';

                    const img = document.createElement('img');
                    img.src = e.target.result;
                    img.style.maxWidth = '100%';
                    img.style.maxHeight = '400px';
                    img.id = `image${inputIndex}-${fileIndex}`; // Unique ID for each image
                    imgWrapper.appendChild(img);

                    imagesContainer.appendChild(imgWrapper);

                    // Initialize Cropper.js for the new image after it has been appended
                    img.addEventListener('load', () => {
                        const cropper = new Cropper(img, {
                            aspectRatio: 1,
                            viewMode: 2,
                        });
                        croppers.push({ cropper, inputIndex, fileIndex });
                    });
                };
                reader.readAsDataURL(file);
            });

            // Show the modal when an image is selected
            $('#cropperModal').modal('show');
        }
    });
});

// Crop images and replace the original input file with the cropped version
cropButton.addEventListener('click', function () {
    croppers.forEach(({ cropper, inputIndex }) => {
        const canvas = cropper.getCroppedCanvas({
            width: 1000,
            height: 1000,
        });

        canvas.toBlob(function (blob) {
            const url = URL.createObjectURL(blob);
            const newImage = new File([blob], imageInputs[inputIndex].files[0].name, { type: blob.type });

            // Update the specific image input field with the cropped image
            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(newImage);  // Only add the new cropped image
            imageInputs[inputIndex].files = dataTransfer.files;
        });
    });

    $('#cropperModal').modal('hide');
});

    </script>
</body>

</html>